generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("POSTGRESQL_URL")
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Employee {
  id                Int      @id @default(autoincrement())
  group_id            Int?  
  name              String
  join_date         DateTime? @default(now())
  first_in          DateTime? @db.Time()
  last_out          DateTime? @db.Time()
  note              String @default("Empty")
  activities        Activity[]
  employee_activitys Employee_Activity[]
  employee_timeoffs   Employee_TimeOff[]
  timeoff           TimeOff[]
  is_deleted        Boolean   @default(false)
  group             Group? @relation(fields: [group_id], references: [id])
}

model Group {
  id      Int      @id @default(autoincrement())
  name    String
  color   String @default("blue")
  is_deleted Boolean   @default(false) 
  employees Employee[] 
}

model Holiday {
  id         Int      @id @default(autoincrement())
  type_id Int?
  name       String
  start_date DateTime? @db.Date
  end_date   DateTime? @db.Date
  is_deleted        Boolean   @default(false)
  type Type_Holiday? @relation(fields: [type_id], references: [id]) 
}

model Type_Holiday {
  id      Int      @id @default(autoincrement())
  name    String
  color   String?
  is_deleted Boolean   @default(false) 
  holidays Holiday[] 
}

model Schedule {
  id            Int             @id @default(autoincrement())
  name          String
  start_time    DateTime        @db.Time(6)
  end_time      DateTime        @db.Time(6)
  note          String
  is_deleted        Boolean   @default(false)
  work_schedules Work_Schedule[]
}

model Work {
  id            Int             @id @default(autoincrement())
  name          String
  is_deleted        Boolean   @default(false)
  work_schedules Work_Schedule[]
}

model Activity {
  id                Int                 @id @default(autoincrement())
  employee_id        Int
  name              String
  description       String
  color             String
  employee          Employee             @relation(fields: [employee_id], references: [id])
  is_deleted        Boolean   @default(false)
  clock_in          Clock_In[]
  employee_activity Employee_Activity[]
  proyects          Proyect[]
}

model Proyect {
  id           Int        @id @default(autoincrement())
  activity_id Int
  name         String
  code         String
  type         String
  is_deleted        Boolean   @default(false)
  clock_ins     Clock_In[]
  activity    Activity  @relation(fields: [activity_id], references: [id])
}

model TimeOff {
  id              Int               @id @default(autoincrement())
  employee_id      Int
  type_id Int
  start_date      DateTime          @db.Date
  end_date        DateTime?          @db.Date
  status          String
  note            String? @default("Empty")
  is_deleted        Boolean   @default(false)
  employee_timeoff Employee_TimeOff[]
  employee         Employee           @relation(fields: [employee_id], references: [id])
  type Type_TimeOff? @relation(fields: [type_id], references: [id]) 

}

model Type_TimeOff {
  id      Int      @id @default(autoincrement())
  name    String
  color   String?
  is_deleted Boolean   @default(false) 
  timeOffs TimeOff[] 
}

model Employee_Activity {
  id           Int       @id @default(autoincrement())
  employee_id   Int
  activitie_id Int
  activity    Activity @relation(fields: [activitie_id], references: [id])
  employee      Employee   @relation(fields: [employee_id], references: [id])
}

model Work_Schedule {
  id          Int      @id @default(autoincrement())
  schedule_id Int
  work_id     Int
  schedule    Schedule @relation(fields: [schedule_id], references: [id])
  work        Work     @relation(fields: [work_id], references: [id])
}

model Clock_In {
  id           Int       @id @default(autoincrement())
  activity_id Int
  proyect_id   Int
  start_time   DateTime  @db.Time(6)
  date         DateTime  @db.Date
  note         String
  is_deleted        Boolean   @default(false)
  activity    Activity @relation(fields: [activity_id], references: [id])
  proyect      Proyect   @relation(fields: [proyect_id], references: [id])
}

model Employee_TimeOff {
  id         Int     @id @default(autoincrement())
  employee_id Int
  timeoff_id Int
  employee    Employee @relation(fields: [employee_id], references: [id])
  timeoff    TimeOff @relation(fields: [timeoff_id], references: [id])
}
